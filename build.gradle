buildscript {
  repositories {
    jcenter()
    maven {
      name = 'forge'
      url = 'http://files.minecraftforge.net/maven'
    }
    maven {
      name = 'gradle'
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
  }
}

apply plugin: 'net.minecraftforge.gradle.forge'

repositories {
  mavenLocal()
  mavenCentral()

}

repositories {
  maven { // CoFH
    name 'Covers Maven'
    url 'http://maven.covers1624.net/'
  }
  maven { // CCL, CCC, NEI
    name 'Chickenbones Repo'
    url 'http://chickenbones.net/maven/'
  }
  
}

dependencies {
deobfCompile "codechicken:CodeChickenLib:1.12.2-3.1.7.+:universal"

deobfCompile ("cofh:CoFHCore:1.12.2-4.3.5.13:universal") {
    exclude group: 'mezz.jei'
  }
  deobfCompile ("cofh:ThermalFoundation:1.12.2-2.4.+:universal") {
    exclude group: 'mezz.jei'
  }
  deobfCompile ("cofh:ThermalExpansion:1.12.2-5.4.+:universal") {
    exclude group: 'mezz.jei'
  }
}

minecraft {
    version = "1.12.2-14.23.3.2655"
    runDir = "run"
    mappings = "snapshot_20180322"
	
	replace '@FINGERPRINT@', project.findProperty('signSHA1')
	
	if (project.hasProperty('mc_username')) {
    clientRunArgs += ['--username', "${project.mc_username}"]
    if (project.hasProperty('mc_password')) {
      clientRunArgs += ['--password=', "${project.mc_password}"]
    }
  }
  if (project.hasProperty('mc_uuid')) {
    clientRunArgs += ['--uuid', "${project.mc_uuid}"]
  }
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

javadoc {
  failOnError = false
}

def mod_file = getModFile()
def short_version = getVersion('VERSION', mod_file)
version = mc_version + '-' + short_version
def display_version = short_version

if (System.getenv().BUILD_NUMBER) {
  version += '.' + System.getenv().BUILD_NUMBER
  display_version = '.' + System.getenv().BUILD_NUMBER
}

sourceCompatibility = targetCompatibility = '1.8'

eclipse.project {
  buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  natures 'org.eclipse.buildship.core.gradleprojectnature'
}

import groovy.json.JsonSlurper

processResources {
  inputs.property 'version', project.version
  inputs.property 'mcversion', project.minecraft.version

  from (sourceSets.main.resources.srcDirs) {
    include 'mcmod.info'
    expand 'version': short_version, 'mcversion': project.minecraft.version
  }

  from (sourceSets.main.resources.srcDirs) {
    exclude 'mcmod.info'
  }

  rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
  manifest {
    if (project.hasProperty('coreplugin')) {
      attributes 'FMLCorePluginContainsFMLMod': 'true'
      attributes 'FMLCorePlugin': project.coreplugin
    }
  }
}

task deobfJar(type: Jar) {
  classifier = 'deobf'
  from sourceSets.main.output
}

task signJar(type: SignJar, dependsOn: reobfJar) {
  // Skips if the keyStore property is missing.
  onlyIf {
    project.hasProperty('keyStore')
  }

  // findProperty allows us to reference the property without it existing. 
  // Using project.propName would cause the script to fail validation if 
  // the property did not exist. 
  keyStore = project.findProperty('keyStore')
  alias = project.findProperty('keyStoreAlias')
  storePass = project.findProperty('keyStorePass')
  keyPass = project.findProperty('keyStoreKeyPass')
  inputFile = jar.archivePath
  outputFile = jar.archivePath
}

build.dependsOn signJar


processResources {
  inputs.property 'version', project.version
  inputs.property 'mcversion', project.minecraft.version

  from (sourceSets.main.resources.srcDirs) {
    include 'mcmod.info'
    expand 'version': short_version, 'mcversion': project.minecraft.version
  }

  from (sourceSets.main.resources.srcDirs) {
    exclude 'mcmod.info'
  }
}

String getModFile() {
  String path = ''
  FileTree tree = fileTree(dir: 'src/main/java')
  tree.include '**/*.java'
  tree.visit { element ->
    if (element.file.isFile()) {
      element.file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith('@Mod(')) {
          path = "src/main/java/$element.relativePath"
        }
      }
    }
  }
  return path
}

String getVersion(String type, String mod_file) {
  String major = '0'
  String revision = '0'
  String patch = '0'
  File file = file(mod_file)
  def prefix = ~/^(?:public|protected|private) static final String $type = ".*$/
  file.eachLine { String s ->
    s = s.trim()
    if (s ==~ prefix || prefix.matcher(s).matches()) {
      String[] bits = s.split("=")
      String interesting = bits[1].trim()
      interesting = interesting.substring(1, interesting.length() - 2)
      String[] pts = interesting.trim().split("\\.")

      major = pts[0] ?: '0'
      revision = pts[1] ?: '0'
      patch = pts[2] ?: '0'
    }
  }
  return "$major.$revision.$patch"
}